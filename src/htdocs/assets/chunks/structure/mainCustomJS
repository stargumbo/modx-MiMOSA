<script type="text/javascript">
(function specData(){

    // Ontology ID provided by MODx backend
    const genOntologyId = '[[*gen_ontologyID]]';

    // JSON feed
    //const ontologyUrlJson = 'https://spreadsheets.google.com/feeds/list/' + genOntologyId + '/od6/public/values?alt=json';
    const ontologyUrlNode = 'http://util274.mia2.cbsig.net:3000/api?id=' + genOntologyId + '&sheet=1';

    // Accordions
    const accordion_preajax = ['.accordion1', '.accordion3', '.accordion4', '.accordion5', '.accordion6'];
    const accordion_postajax = ['.accordion2'];

    // Empty Containers
    const trimparams = [];

    // Build Tabs
    const firetabs = function(){
        jQuery('.tabs .tab-links a, .tabs .tab-links-top a').on('click', function(e){
            const currentAttrValue = jQuery(this).attr('href');
            jQuery('.tabs ' + currentAttrValue).show().siblings().hide();
            jQuery(this).parent('li').addClass('active').siblings().removeClass('active');
            e.preventDefault();
        });
        jQuery('.tab-links li:first-child, .tab-content div:first-child, .tab-links-top li:first-child, .tab-content-top div:first-child').addClass('active');
    };

    // Build Accordion
    const fireaccordion = function(params){
        for (i=0; i<params.length; i++) {
            jQuery(params[i]).accordion({
                active: false,
                collapsible: true,
                heightStyle: 'content'
            });
        }
    };

    function trimempty(params){
        for (i=0; i<params.length; i++) {
            if(!jQuery.trim(jQuery('div'+params[i]).html()).length){
                jQuery(params[i]).remove();
            }
        }
    }

    // Fire for loop async
    function asyncForEach(array, done, iterator) {
        let i = 0;
        next();
        function next(err) {
            if (err) {
                done(err);
            } else if (i >= array.length) {
                done();
            } else if (i < array.length) {
                let item = array[i++];
                setTimeout(function() {
                    iterator(item, i - 1, next);
                }, 0);
            }
        }
    }

    // Dynamically build Tabs based on array
    function buildTabLayout(tabArray, destination, parentIndex){

        // Build tabs structure
        const rowTypeTabs_container = jQuery('<div/>').addClass('tabs');
        const rowTypeTabs_ul = jQuery('<ul/>').addClass('tab-links');
        const rowTypeTabs_contentContainer = jQuery('<div/>').addClass('tab-content');

        // Append Tabs to destination
        rowTypeTabs_container.appendTo(destination);
        rowTypeTabs_ul.appendTo(rowTypeTabs_container);
        rowTypeTabs_contentContainer.appendTo(rowTypeTabs_container);

        // Build tabs per embedTarget
        jQuery.each(tabArray, function(r,v){
            const randomNum = Math.floor(Math.random() * 1000000);
            const rowTypeTabs_li = jQuery('<li/>', {
                'class' : 'tabtrim-' + randomNum
            });
            const rowTypeTabs_a = jQuery('<a/>',{
                'href' : '#tab-' + v + '-' + randomNum,
                'text' : v
            });
            const rowTypeTabs_content = jQuery('<div/>', {
                'class' : 'tab tab-'+ v + ' tabtrim-' + randomNum,
                'id' : 'tab-' + v + '-' + randomNum,
                'data-ontology-type' : v
            });
            const rowDataContainer = jQuery('<pre/>', {
                'class' : 'line-numbers',
                'data-code-render' : v + '-' + parentIndex
            });

            rowTypeTabs_li.appendTo(rowTypeTabs_ul);
            rowTypeTabs_a.appendTo(rowTypeTabs_li);
            rowTypeTabs_content.appendTo(rowTypeTabs_contentContainer);
            if (typeof parentIndex !== 'undefined'){
                rowDataContainer.appendTo(rowTypeTabs_content);
            }
            trimparams.push('.tabtrim-' + randomNum);
        });
    }

    // Build ontology section
    function fireOntologyBuild(){
        jQuery.getJSON(ontologyUrlNode, function(data) {

            // Main spreadsheet row object (entry)
            const mainObject = data.rows;

            // Build Timestamp
            const updatedate = data.lastupdated;

            // Content arrays
            const codePlatform = ['Web','Android','iOS'];
            const rowPageType = ['Basic', 'Article', 'Video', 'webView'];
            const trackingMethods = ['trackState', 'trackAction'];

            // Columns disabled in code views
            const disablecells = ['node','project','channel','feature','subfeature','servicelevel','productline','comments',
                'trackingmethod',
                'rokufiretv','tvos','appletvlegacy','web','iosandroid','xboxwin10',
                'comments','comscoreqa','omnitureqa'
            ];

            // QA columns
            const qaColumns = ['comscoreqa','omnitureqa'];

            // Build page type tabs
            jQuery.each(trackingMethods, function(v,r){
                buildTabLayout(rowPageType, jQuery('[data-row-placeholder=' + r + ']'));
            });

            // Cycle through spreadsheet rows
            for (i=0; i<mainObject.length; i++) {

                // Define accordion header (node value)
                const rowNode = (i + 1) + ' - ' + mainObject[i].node;

                // Build array of column names : cell values
                const cellStringArray = mainObject[i];

                // Extract entry level params
                const rowType_trackmethod = mainObject[i].trackingmethod;
                const rowType_trackmethodaction = mainObject[i].trackingmethodaction;
                const rowType_pagename = mainObject[i].pagename;
                const rowType_mediapartnerid = mainObject[i].mediapartnerid;
                const rowType_articleid = mainObject[i].articleid;
                const rowType_webviewurl = mainObject[i].webviewurl;

                //console.log(rowType_webviewurl);

                // Define trackState / trackAction payload string vars per platform
                let payloadAction_android = '';
                let payloadAction_ios = '';
                let payloadAction_web = '';

                // Define QA Statuses
                let qaAllPass = '';
                let qaComments = '';
                let qaStatusRow = '';
                let qaStatusOm = '';
                let qaStatusCs = '';
                let qaPassFail = '';

                // Define code type containers
                let divWebviewParams = '';

                // Set row's pageType
                let rowType_pageType = '';
                if (rowType_webviewurl !== 0){
                    rowType_pageType = 'webView';
                } else if (rowType_articleid !== 0){
                    rowType_pageType = 'Article';
                } else if (rowType_mediapartnerid !== 0){
                    rowType_pageType = 'Video';
                } else {
                    rowType_pageType = 'Basic';
                }

                // Build row container
                const rowContainer = jQuery('<div/>', {
                    'class' : 'accordion2 codeAccordion',
                    'data-ontology-method' : rowType_trackmethod,
                    'data-ontology-type' : rowType_pageType,
                    'data-ontology-level' : 'row'
                });

                // Build row node text for ontology row container
                const rowNodeName = jQuery('<strong/>').text(rowNode);

                // Build row data container
                const rowInnerContainer = jQuery('<div/>').addClass('container-'+i);

                // Build Comments section placeholder
                const rowCommentsSection = jQuery('<div/>',{
                    'class' : 'container-' + i + '-commentsSection commentsSectionStyle',
                    'html' : '<h3>COMMENTS:</h3>'
                });

                // Build code type containers
                const divCode_android = jQuery('<code/>').addClass('language-java');
                const divCode_ios = jQuery('<code/>').addClass('language-objectivec');
                const divCode_web = jQuery('<code/>').addClass('language-json');
                const divCode_webView = jQuery('<div/>').addClass('webview' + i);

                // Build QA status checkboxes
                (function qaStatusBuild() {
                    qaStatusRow = jQuery('<span/>', {
                        'class': 'container-' + i + '-qaStatus',
                        'style': 'float:right; font-style:italic;'
                    });

                    qaStatusOm = jQuery('<span/>', {
                        'text': 'Omniture: ',
                        'class': 'qaStatusOmniture'
                    }).appendTo(qaStatusRow);

                    qaStatusCs = jQuery('<span/>', {
                        'text': 'Comscore: ',
                        'class': 'qaStatusComscore'
                    }).appendTo(qaStatusRow);

                    qaPassFail = jQuery('<span/>').addClass('qaStatusBox');

                    jQuery(qaPassFail).clone().appendTo(qaStatusCs).addClass('comscoreqaPassFail' + i);
                    jQuery(qaPassFail).clone().appendTo(qaStatusOm).addClass('omnitureqaPassFail' + i);
                })();


                // Build tab and accordion structure
                (function baseSturctureBuild(){

                    // Attach row container to tracking method container
                    rowContainer.appendTo('[data-row-placeholder=' + rowType_trackmethod +']' + ' .tab-' + rowType_pageType);

                    // Attach row node text to row container
                    rowNodeName.appendTo(rowContainer);

                    // Attach row data container to row conatiner
                    rowInnerContainer.appendTo(rowContainer);

                    if (rowType_pageType !== 'webView') {

                        // Build code tabs
                        buildTabLayout(codePlatform, rowInnerContainer, i);

                        // Build first rows of code
                        divCode_ios.append('NSDictionary *cdata = @{\n');
                        divCode_web.append('utag_data = {\n');

                        // Attach code types to code containers (built in buildTabLayout)
                        divCode_android.appendTo('[data-code-render=Android-' + i + ']');
                        divCode_ios.appendTo('[data-code-render=iOS-' + i + ']');
                        divCode_web.appendTo('[data-code-render=Web-' + i + ']');
                    } else {

                        // Format webview url to account for existent query params
                        if (rowType_webviewurl.includes('?') && rowType_webviewurl !== 0) {
                            divWebviewParams = rowType_webviewurl + '&';
                        } else {
                            divWebviewParams = rowType_webviewurl + '?';
                        }

                        // Add webView data
                        divCode_webView.append('A webview node must suppress the actual content beacon, and pass the visitor ID (as indicated in the SDK update provided) into the URL of the embedded page. <br /><br /><strong>Webview Embed URL -</strong><br />' + divWebviewParams + 'adobe_mc=[APPENDED VISITOR ID]');

                        // Attach webview data
                        divCode_webView.appendTo(rowInnerContainer);
                    }
                })();

                // Cycle through columns and populate code types
                jQuery.each( cellStringArray, function( key, value ) {

                    // Format cell data based on object key/value pairs defined in mainObject
                    const cellName = key;
                    let cellValue = value;

                    const payloadActionType = (rowType_trackmethod === 'trackState' ? rowType_pagename : rowType_trackmethodaction);

                    let payloadData_android = '';
                    let payloadData_ios = '';
                    let payloadData_web = '';

                    // Define final character for code row
                    let rowSeparator = '';

                    // Highlight dynamic column values
                    if (/(\[.*?])/gi.test(cellValue)) {
                        cellValue = cellValue.replace(/(\[.*?])/gi, function replacer(match) {
                            return '<mark>' + match + '</mark>';
                        });
                    }

                    if (rowType_pageType !== 'webView') {
                        // Build code formatted columns
                        payloadData_android = 'cdata.put("' + cellName + '", "' + cellValue + '");\n';
                        payloadData_ios = '\t@"' + cellName + '" : @"' + cellValue + '"' + rowSeparator + '\n';
                        payloadData_web = '\t"' + cellName + '" : "' + cellValue + '"' + rowSeparator + '\n';

                        // Build last row of code types
                        payloadAction_android = 'Analytics.' + rowType_trackmethod + '("' + payloadActionType + '", cdata);';
                        payloadAction_ios = '};\n[ADBMobile ' + rowType_trackmethod + ':@"' + payloadActionType + '", data:cdata];';
                        payloadAction_web = '}';

                        // Check for disabled cells in disablecells array
                        if (disablecells.indexOf(cellName) === -1 && cellValue !== 0) {

                            // Attach data row to code type container
                            jQuery(divCode_android).append(payloadData_android);
                            jQuery(divCode_ios).append(payloadData_ios);
                            jQuery(divCode_web).append(payloadData_web);
                        }
                    }

                    jQuery(rowNodeName).append(qaStatusRow);

                    if (qaColumns.includes(cellName)){
                        if (cellValue === 'fail' && cellValue !== 0) {
                            jQuery('.' + cellName + 'PassFail' + i).addClass('qaBoxFail');
                            qaAllPass = '1';
                        } else if (cellValue === 'pass' && cellValue !== 0) {
                            jQuery('.' + cellName + 'PassFail' + i).addClass('qaBoxPass');
                            qaAllPass = '1';
                        }
                    }

                    if (cellName === 'comments' && cellValue !== 0) {
                        jQuery(rowInnerContainer).append(rowCommentsSection);
                        jQuery(rowCommentsSection).append(cellValue);
                        qaComments = '1';
                    }
                });

                if (qaComments === '1' && qaAllPass !== '1' && qaAllPass !== '2'){
                    jQuery(qaStatusCs).hide();
                    jQuery(qaStatusOm).hide();
                    jQuery(qaStatusRow).append('See Comments');
                }

                // Append payload action to code types if not webView
                if (rowType_pageType !== 'webView') {

                    // Attach last row of code types
                    jQuery(divCode_android).append(payloadAction_android);
                    jQuery(divCode_ios).append(payloadAction_ios);
                    jQuery(divCode_web).append(payloadAction_web);
                }
            }

            // Append Timestamp
            jQuery('.ontologyupdatedate span').append(updatedate);
        });
    }

    /* jQuery onload */
    jQuery(function(){

        // Kill empty menu clicks
        jQuery('.linkdisable').click(function(e){
            e.preventDefault();
            return false;
        });



        fireaccordion(accordion_preajax);
        firetabs();
        fireOntologyBuild();
        jQuery(document).ajaxStop(function(){
            fireaccordion(accordion_postajax);
            trimempty(trimparams);
            firetabs();
            $('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        });
    });
})();
</script>

